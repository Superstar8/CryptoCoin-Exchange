{"version":3,"sources":["components/ExchHeader/logo.svg","components/Coin/Coin.jsx","components/Coinlist/Coinlist.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchHeader/ExchHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Td","styled","td","Coin","props","name","ticker","price","showBalance","balance","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","Coinlist","coinData","map","key","Section","section","AccountBalance","buttonText","content","amount","handleBalanceVisabilityChange","Img","img","Header","header","H1","h1","ExchHeader","src","logo","alt","Component","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","className","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62035dc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td`\nborder : 1px solid #cccccc;\nwidth: 25vh;\n`;\n\nexport default function Coin(props) {\n\n\nconst handleClick = (event) => {\n    event.preventDefault();\n\n    props.handleRefresh(props.tickerId);\n\n}\nreturn (\n    <tr>\n    <Td>{props.name}</Td>\n    <Td>{props.ticker}</Td>\n    <Td>${props.price}</Td>\n    {props.showBalance ? <Td>${props.balance}</Td> : null}\n    <Td>\n        <form>\n            <button onClick={handleClick} >Refresh</button>\n        </form>\n        \n    </Td>\n    </tr>\n);\n\n}\nCoin.propTypes= {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n}","import React from 'react';\nimport Coin from './../Coin/Coin';\nimport styled from 'styled-components';\n\n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.4rem;\n`;\nexport default function Coinlist(props) {\nreturn (\n\n<Table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Ticker</th>\n            <th>Price</th>\n            {props.showBalance ? <th>Balance</th> : null}\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        {\n        props.coinData.map( ({key,name,ticker,price,balance}) =>\n            <Coin key={key} \n            handleRefresh={props.handleRefresh}\n            name={name} \n            ticker={ticker} \n            showBalance ={props.showBalance}\n            balance={balance}\n            price={price} \n            tickerId={key}/>\n            )\n        }\n\n    </tbody>   \n</Table>\n\n)\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nexport default function AccountBalance(props) {\n\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = null;\n    if(props.showBalance) {\n        content =  <>Balance: ${props.amount}</>;\n    }\n    return ( \n        <Section>\n            {content}\n    <button onClick={props.handleBalanceVisabilityChange}>{buttonText}</button>\n        </Section>\n    );\n\n}\n\n\n\nAccountBalance.propTypes= {\n    amount: PropTypes.number.isRequired,\n}","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n`;\n  \nconst Header = styled.header`\n    background-color: #282c34;\n    min-height: 25vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;   \n`;\n\n\n  const H1 = styled.h1`\n     font-size: 4rem;\n  `;\n\n  \nexport default class ExchHeader extends Component {\n    render() {\n        return (\n            <Header>\n            <Img src= {logo} alt=\"React logo\"/>\n            <H1>\n              Crypto Coin Exchange\n            </H1>\n              </Header>\n        )\n    }\n}\n","import React, {useState, useEffect} from 'react';\nimport Coinlist from './components/Coinlist/Coinlist';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport ExchHeader from './components/ExchHeader/ExchHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\ntext-align: center;\nbackground-color: #90b4fc;\ncolor: rgb(23, 12, 40)\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number (price).toFixed(4));\n\nfunction App(props) {\n  const [balance,/*setBalance*/] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id=> axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data; \n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0, \n        price: formatPrice (coin.quotes.USD.price),\n      };\n    })\n  \n    setCoinData(coinPriceData);\n  }\n\nuseEffect(function() {\nif (coinData.length === 0) {\ncomponentDidMount();\n}\n});\n \n  const handleBalanceVisabilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n  \n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function( values ) {\n    let newValues = {...values};\n    if (valueChangeId === values.key) {   \n      newValues.price = newPrice;\n}\n  return newValues;\n   });\n   setCoinData(newCoinData);\n  }\n\n  return (\n    <Div className=\"App\">\n          <ExchHeader/>\n          <AccountBalance amount= {balance} \n          showBalance= {showBalance} \n          handleBalanceVisabilityChange={handleBalanceVisabilityChange}/>\n          <Coinlist \n          coinData= {coinData} \n          showBalance={showBalance}\n          handleRefresh= {handleRefresh}/>\n    </Div>\n  );\n\n\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}