{"version":3,"sources":["components/ExchHeader/logo.svg","components/Coin/Coin.jsx","components/Coinlist/Coinlist.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchHeader/ExchHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Td","styled","td","TdControls","TdName","Button","button","Coin","props","name","ticker","price","showBalance","balance","className","btn-info","onClick","event","preventDefault","handleRefresh","tickerId","btn","btn-primary","btn-sm","handleTransaction","btn-danger","Table","table","Coinlist","coinData","map","key","Section","section","Balance","div","BalanceToggleButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","buttonText","content","format","amount","handleBalanceVisabilityChange","handleBrrrr","Img","img","Header","header","H1","h1","ExchHeader","src","logo","alt","Component","Div","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldBalance","oldValue","isBuy","valueChangedId","balanceChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca345df7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nconst Td = styled.td`\nborder : 1px solid #eeeeee;\n    width: 16vw;\n`;\n\nconst TdControls = styled(Td)`\n    width: 18vw;\n`;\n\nconst TdName = styled(Td)`\n    width: 16vw;\n`;\n\nconst Button = styled.button`\n   \n    font-size: 11px;\n    width: 60px;\n    margin: 1px 2px 0px;\n    color: magenta;\n    \n    \n`;\n\nexport default function Coin(props) {\n\n\nconst handleRefresh = (event) => {\n    event.preventDefault();\n    props.handleRefresh(props.tickerId);\n\n}\nconst handleBuy = (event) => {\n    event.preventDefault();\n    props.handleTransaction(true, props.tickerId);\n\n}\nconst handleSell = (event) => {\n    event.preventDefault();\n    props.handleTransaction(false, props.tickerId);\n\n}\nreturn (\n    <tr>\n    <TdName>{props.name}</TdName>\n    <Td>{props.ticker}</Td>\n    <Td>${props.price}</Td>\n    {props.showBalance ? <Td>${props.balance}</Td> : 'Bal'}\n    <TdControls>\n        <form>\n            <Button className btn-info onClick={handleRefresh}>\n                Refresh\n            </Button>\n            <Button className btn btn-primary btn-sm onClick={handleBuy}>\n                Buy \n            </Button>\n            <Button className btn-danger onClick={handleSell}>\n                Sell\n            </Button>\n        </form>\n        \n    </TdControls>\n    </tr>\n);\n\n}\nCoin.propTypes= {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n}","import React from 'react';\nimport Coin from './../Coin/Coin';\nimport styled from 'styled-components';\n\n\nconst Table = styled.table`\n    margin: 55px auto 55px auto;\n    display: inline-block;\n    font-size: 1.4rem;\n`;\nexport default function Coinlist(props) {\nreturn (\n\n<Table  >\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Ticker</th>\n            <th>Price</th>\n            <th>Balance</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        {\n        props.coinData.map( ({key,name,ticker,price,balance}) =>\n            <Coin key={key} \n            handleRefresh={props.handleRefresh}\n            handleTransaction={props.handleTransaction}\n            name={name} \n            ticker={ticker} \n            showBalance ={props.showBalance}\n            balance={balance}\n            price={price} \n            tickerId={key}/>\n            )\n        }\n\n    </tbody>   \n</Table>\n\n)\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    line-height: 3rem;\n    \n`;\n\nconst Balance = styled.div`\n    min-width: 250px;\n    margin: 0.5rem 0 0 2.5rem;\n    font-size: 1.6rem;\n    vertical align: middle;\n    text align: left;\n`;\n\nconst Button = styled.button`\n    margin 0 2rem;\n`;\n\nconst BalanceToggleButton = styled(Button)`\n    width: 19rem;\n`;\n\nvar formatter = Intl.NumberFormat('en-US',{\n    style: 'currency',\n    currency: 'USD',\n});\n\nexport default function AccountBalance(props) {\n\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = '\\u00A0';\n    if (props.showBalance) {\n        content = <> {formatter.format(props.amount)}</>\n    }\n    const buttonClass = 'btn' + props.showBalance ? 'btn-secondary':'btn-secondary';\n    \n    return ( \n        <>\n        <Section>\n          <Balance>{content}</Balance>\n    <BalanceToggleButton \n        onClick={props.handleBalanceVisabilityChange}\n        className = {buttonClass}>\n        {buttonText}\n    </BalanceToggleButton>\n        <Button className = \"btn-warning\"\n            onClick= {props.handleBrrrr}>\n            <i className = \"fas fa-helicopter\"></i>\n\n        </Button>\n        </Section>\n        </>\n    );\n\n}\n\n\n\nAccountBalance.propTypes= {\n    amount: PropTypes.number.isRequired,\n}","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\n\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n`;\n  \nconst Header = styled.header`\n    background-color: #282c34;\n    min-height: 25vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;   \n`;\n\n\n  const H1 = styled.h1`\n     font-size: 4rem;\n  `;\n\n  \nexport default class ExchHeader extends Component {\n    render() {\n        return (\n            <Header>\n            <Img src= {logo} alt=\"React logo\"/>\n            <H1>\n              Crypto Coin Exchange\n            </H1>\n              </Header>\n        )\n    }\n}\n","import React, {useState, useEffect} from 'react';\nimport Coinlist from './components/Coinlist/Coinlist';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport ExchHeader from './components/ExchHeader/ExchHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n\n    import 'bootswatch/dist/slate/bootstrap.min.css';\n    import '@fortawesome/fontawesome-free/js/all';\n\nconst Div = styled.div`\ntext-align: center;\nbackground-color: #90b4fc;\ncolor: rgb(23, 12, 40)\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number (price).toFixed(4));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id=> axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data; \n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0, \n        price: formatPrice (coin.quotes.USD.price),\n      };\n    })\n  \n    setCoinData(coinPriceData);\n  }\n\nuseEffect(function() {\nif (coinData.length === 0) {\ncomponentDidMount();\n}\n});\n \nconst handleBrrrr = () => {\n  setBalance( oldBalance => oldBalance + 1200);\n}\n\n  const handleBalanceVisabilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n  const handleTransaction = (isBuy, valueChangedId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map(function (values) {\n      let newValues = {...values};\n      if(valueChangedId === values.key) {\n        newValues.balance += balanceChange;\n        setBalance(oldBalance => oldBalance - balanceChange * newValues.price);\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n  \n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function( values ) {\n    let newValues = {...values};\n    if (valueChangeId === values.key) {   \n      newValues.price = newPrice;\n}\n  return newValues;\n   });\n   setCoinData(newCoinData);\n  }\n\n  return (\n    <Div className=\"App\">\n          <ExchHeader/>\n          <AccountBalance amount= {balance} \n          showBalance= {showBalance} \n          handleBrrrr={handleBrrrr}\n          handleBalanceVisabilityChange={handleBalanceVisabilityChange}/>\n          <Coinlist \n          coinData={coinData} \n          showBalance={showBalance}\n          handleTransaction={handleTransaction}\n          handleRefresh={handleRefresh}/>\n    </Div>\n  );\n\n\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}